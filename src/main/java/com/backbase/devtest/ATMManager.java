package com.backbase.devtest;


import com.fasterxml.jackson.databind.ObjectMapper;
import org.apache.camel.CamelContext;
import org.apache.camel.Exchange;
import org.apache.camel.Processor;
import org.apache.camel.builder.RouteBuilder;
import org.apache.camel.impl.DefaultCamelContext;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Autowired;


import java.io.IOException;
import java.io.InputStream;
import java.io.StringWriter;
import java.util.ArrayList;

import java.util.List;


/**
 * ATMManager stores and renders ATM data
 * Created by bbates on 1/16/17.
 */


public class ATMManager {

    static Log log = LogFactory.getLog(ATMManager.class.getName());
    /**
     * List of ATMS stored in the application
     */
    private List<ATM> atmList=new ArrayList<ATM>(100);

    /**
     * getSourceService returns the source service string
     * @return String the source service string
     */
    public String getSourceService() {
        return sourceService;
    }

    /**
     * setSourceService
     * @param sourceService the source service string
     */
    public void setSourceService(String sourceService) {
        this.sourceService = sourceService;
    }


    String sourceService;

    /**
     * isSourceXSSIMode returns if XSSI  Cross Site Script Inclusion is enabled
     * @return boolean true if XSSI  Cross Site Script Inclusion is enabled
     */
    public boolean isSourceXSSIMode() {
        return sourceXSSIMode;
    }

    public void setSourceXSSIMode(boolean sourceXSSIMode) {
        this.sourceXSSIMode = sourceXSSIMode;
    }

    boolean sourceXSSIMode=false;

    /**
     * class to construct a Camel route to load ATM data from a source service
     */
    class ATMTransformRoute extends RouteBuilder {
        /**
         * configure configures a Camel route to load ATM data from a source service
         */
          public void configure(){

              if(sourceXSSIMode)
                  from("timer://refresh?fixedRate=true&period=60000").to(sourceService).process(new JSONXSSITransformProcessor()).process(new ATMProcessor());
              else
                  from("timer://refresh?fixedRate=true&period=60000").to(sourceService).process(new ATMProcessor());
          }


    }

    /**
     * configures an ATMProcess to process ATM JSON and store as local data
     */
    class ATMProcessor implements Processor {
        /**
         * process a processing stage of a Camel route
         * @param exchange  Camel Exchange that encapsulates a message and headers
         * @throws Exception  exception generated by Camel processing
         */
        public void process(Exchange exchange) throws Exception {

            ObjectMapper mapper=new ObjectMapper();
            exchange.getIn();

            List<ATM> atmIter=mapper.readValue(exchange.getIn().getBody(InputStream.class), mapper.getTypeFactory().constructCollectionType(List.class, ATM.class));
            synchronized(this){
                atmList=new ArrayList<ATM>(100);
                for(ATM atm : atmIter){
                      addATM(atm);
                }
            }
        }
    }

    /**
     * addATM adds an ATM object to the data store
     * @param atm atm object
     */
    public synchronized void addATM(ATM atm){
        atmList.add(atm);
    }
    private CamelContext camelContext;
    /**
     * loadATMList uses Camel route to load ATM data from source
     * @throws Exception  excpetion generated by Camel processing
     */
    public void startATMRefresh() throws Exception{

        camelContext = new DefaultCamelContext();
        camelContext.addRoutes(new ATMTransformRoute());
        camelContext.start();

        Thread.sleep(10000);

    }
     public void stopATMRefresh(){
         if(camelContext !=null){
            try {
                camelContext.stop();
                camelContext=null;
            } catch (Exception e) {
             e.printStackTrace();
                log.error(e.getMessage(),e);
            }
         }
     }
    /**
     * listATMJSON
     * @return String JSON formatted list of ATM
     */
    public String listATMJSON(){
        StringWriter sw=new StringWriter();
        ObjectMapper mapper = new ObjectMapper();
        try {
            mapper.writeValue(sw,atmList);
        } catch (IOException e) {
            e.printStackTrace();
            log.error(e.getMessage(),e);
        }
       return sw.toString();
    }

    /**
     * listATMJSONByCity
     * @param city input sity to filter
     * @return String JSON formatted ATM objects
     */
    public String listATMJSONByCity(String city){
          StringWriter sw=new StringWriter();
          ObjectMapper mapper = new ObjectMapper();
          ArrayList<ATM> filterList=new ArrayList<ATM>(100);
        for (ATM atm : atmList) {
            if (atm.getAddress() != null && atm.getAddress().getCity() != null && atm.getAddress().getCity().equalsIgnoreCase(city))
                filterList.add(atm);
        }
          try {
              mapper.writeValue(sw,filterList);
          } catch (IOException e) {
              e.printStackTrace();
              log.error(e.getMessage(),e);
          }
         return sw.toString();
      }

    /**
     * listATMByCity
     * @param city   city filter
     * @return  list of ATM
     */
    public List<ATM> listATMByCity(String city){

          ArrayList<ATM> filterList=new ArrayList<ATM>(100);
        for (ATM atm : atmList) {
            if (atm.getAddress() != null && atm.getAddress().getCity() != null && atm.getAddress().getCity().equalsIgnoreCase(city))
                filterList.add(atm);
        }

         return filterList;
      }
}
